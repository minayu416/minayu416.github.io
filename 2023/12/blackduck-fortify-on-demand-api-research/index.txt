3:I[9275,[],""]
5:I[1343,[],""]
6:I[4080,["185","static/chunks/app/layout-db013eb9512fa384.js"],""]
4:["routes","2023/12/blackduck-fortify-on-demand-api-research","c"]
0:["7mAUAB-lMdf9lzd3QU--0",[[["",{"children":[["routes","2023/12/blackduck-fortify-on-demand-api-research","c"],{"children":["__PAGE__?{\"routes\":[\"2023\",\"12\",\"blackduck-fortify-on-demand-api-research\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["routes","2023/12/blackduck-fortify-on-demand-api-research","c"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},[["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null],null]},[["$","html",null,{"lang":"en","children":[["$","head",null,{"children":[["$","$L6",null,{"src":"//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js","strategy":"afterInteractive"}],["$","$L6",null,{"src":"https://www.googletagmanager.com/gtag/js?id=G-EETGWC7GNV","strategy":"afterInteractive"}],["$","$L6",null,{"id":"ga4-init","strategy":"afterInteractive","children":"\n            window.dataLayer = window.dataLayer || [];\n            function gtag(){dataLayer.push(arguments);}\n            gtag('js', new Date());\n            gtag('config', 'G-EETGWC7GNV', {\n              page_path: window.location.pathname,\n            });\n          "}]]}],["$","body",null,{"children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"styles":null}]}]]}],null],null],[[["$","link","0",{"rel":"stylesheet","href":"https://minayu.site/_next/static/css/62412e0261ddfa11.css","precedence":"next","crossOrigin":"$undefined"}]],[null,"$L7"]]]]]
7:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"[後端技術研究] Black Duck APIs 和 Fortify On Demand APIs 怎麼使用？ (透過Python Requests或Postman) - 月水瓶 @Mina 的人生實驗室"}],["$","meta","3",{"name":"description","content":"公司有一項冗長繁瑣的程式資安審核流程使用Black Duck和Fortify On Demand Scans，為了能達成自動化兩個掃描功能，我們研究了這兩項掃描服務的APIs，並在此文章紀錄我們的研究成果。"}],["$","meta","4",{"name":"application-name","content":"月水瓶 @Mina 的人生實驗室"}],["$","meta","5",{"name":"author","content":"minayu416"}],["$","link","6",{"rel":"author","href":"https://minayu.site"}],["$","meta","7",{"name":"author","content":"@Mina Influence"}],["$","meta","8",{"name":"generator","content":"Next.js 14.2.5"}],["$","meta","9",{"name":"keywords","content":"Black Duck Scan APIs,Fortify On Demand Scan APIs,Python,Postman"}],["$","meta","10",{"name":"referrer","content":"origin-when-cross-origin"}],["$","meta","11",{"name":"creator","content":"minayu416"}],["$","meta","12",{"name":"publisher","content":"minayu416"}],["$","meta","13",{"name":"robots","content":"index, follow"}],["$","meta","14",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","15",{"rel":"canonical","href":"https://minayu.site/2023/12/blackduck-fortify-on-demand-api-research/"}],["$","link","16",{"rel":"alternate","hrefLang":"zh-TW","href":"https://minayu.site/2023/12/blackduck-fortify-on-demand-api-research/"}],["$","meta","17",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","18",{"property":"og:title","content":"[後端技術研究] Black Duck APIs 和 Fortify On Demand APIs 怎麼使用？ (透過Python Requests或Postman)"}],["$","meta","19",{"property":"og:description","content":"公司有一項冗長繁瑣的程式資安審核流程使用Black Duck和Fortify On Demand Scans，為了能達成自動化兩個掃描功能，我們研究了這兩項掃描服務的APIs，並在此文章紀錄我們的研究成果。"}],["$","meta","20",{"property":"og:url","content":"https://minayu.site/2023/12/blackduck-fortify-on-demand-api-research/"}],["$","meta","21",{"property":"og:site_name","content":"月水瓶 @Mina 的人生實驗室"}],["$","meta","22",{"property":"og:locale","content":"zh-TW"}],["$","meta","23",{"property":"og:image","content":"https://minayu.site/static/img/cover-image.jpeg"}],["$","meta","24",{"property":"og:image:width","content":"1200"}],["$","meta","25",{"property":"og:image:height","content":"630"}],["$","meta","26",{"property":"og:type","content":"article"}],["$","meta","27",{"property":"article:published_time","content":"2023-12-04T13:37:20.000Z"}],["$","meta","28",{"property":"article:author","content":"Mina Yu"}],["$","meta","29",{"name":"twitter:card","content":"summary"}],["$","meta","30",{"name":"twitter:site:id","content":"@MingJungYU"}],["$","meta","31",{"name":"twitter:creator","content":"@MingJungYU"}],["$","meta","32",{"name":"twitter:title","content":"[後端技術研究] Black Duck APIs 和 Fortify On Demand APIs 怎麼使用？ (透過Python Requests或Postman)"}],["$","meta","33",{"name":"twitter:description","content":"公司有一項冗長繁瑣的程式資安審核流程使用Black Duck和Fortify On Demand Scans，為了能達成自動化兩個掃描功能，我們研究了這兩項掃描服務的APIs，並在此文章紀錄我們的研究成果。"}],["$","meta","34",{"name":"twitter:image","content":"https://minayu.site/static/img/cover-image.jpeg"}],["$","meta","35",{"name":"twitter:image:alt","content":"@Mina Influence Image"}],["$","link","36",{"rel":"shortcut icon","href":"/static/img/favicon.jpg"}],["$","link","37",{"rel":"icon","href":"/static/img/favicon.jpg"}],["$","link","38",{"rel":"apple-touch-icon","href":"/static/img/favicon.jpg"}],["$","meta","39",{"name":"next-size-adjust"}]]
1:null
8:I[619,["676","static/chunks/870fdd6f-d8d8a996639eb86b.js","168","static/chunks/168-06c8f4fac5ec5c0f.js","619","static/chunks/619-4671ee34442d690f.js","432","static/chunks/app/%5B...routes%5D/page-ab50a535e409addd.js"],"Navbar"]
9:T4a56,<p>公司有一項冗長繁瑣的程式資安審核流程使用 Black Duck 和 Fortify On Demand Scans，為了能達成自動化兩個掃描功能，我們研究了這兩項掃描服務的 APIs，並在此文章紀錄我們的研究成果。</p>
<p>研究 <code>Black Duck(BD)</code> 和 <code>Fortify On Demand(FoD)</code> 掃描服務，是由於<a href="/2023/12/design-innovative-solutions-on-automating-product-release-flow/">公司希望能將這兩項掃描服務自動化</a>，在經過 3 週左右的研究，我成功的運用 APIs 達成我們所需的功能，將研究結果記錄於此篇。</p>
<p><strong><em>請注意，此篇紀錄的 API endpoints 僅有達成我們功能所需的 APIs，並非所有。</em></strong></p>
<p>因為我當初在研究時，發現網路上幾乎沒有其他人分享怎麼使用這兩個掃描服務的 APIs，所以如果你幸運需要研究如何自動化或者如何使用 APIs，希望這篇文章能幫助到你。</p>
<p>原則上，兩項掃描服務的 APIs 文件都寫得還算詳細，但還是會遇到一些小問題，所以我會把那些遇到的坑寫出來。</p>
<h2>大綱</h2>
<p>以下是本篇文章介紹的 APIs 大綱</p>
<p>| 掃描服務          | 功能                            | 描述                                                                           | API                                                                                                                   |
| ----------------- | ------------------------------- | ------------------------------------------------------------------------------ | --------------------------------------------------------------------------------------------------------------------- |
| Fortify On Demand | Oauth Authentication            | 取得授權的 Oauth token，才能使用這個 token call 其他 APIs                      | https://api.ams.fortify.com/oauth/token                                                                               |
|                   | Get Application                 | 取得所有的 applications                                                        | https://api.ams.fortify.com/api/v3/application                                                                        |
|                   | Get Release (with filter)       | 取得 release 或隸屬於指定的 application 下的 release，包含講解 filter 查找功能 | https://api.ams.fortify.com/api/v3/release 或 https://api.ams.fortify.com/api/v3/application/&#x3C;application_id>/release |
| Black Duck        | Authentication                  | 取得用來 call 其他 API 的 bearer token                                         | https://&#x3C;host_name>/api/tokens/authenticate                                                                           |
|                   | Query project                   | 找到指定的 projct (含 filter 過濾)                                             | https://&#x3C;host_name>/api/projects                                                                                      |
|                   | Get version                     | 取得指定的 project 下所有的版本資訊                                            | https://&#x3C;host_name>/api/projects/&#x3C;project_id>/versions                                                                |
|                   | Generate Version Details Report | 對於指定的 project 及版本產出 Version Details 報告                             | https://&#x3C;host_name>/api/versions/&#x3C;version_id>/reports                                                                 |
|                   | Download Version Details Report | 下載報告                                                                       | https://&#x3C;host_name>/api/projects/&#x3C;project_id>/versions/&#x3C;version_id>/reports/&#x3C;report_id>/download                      |
|                   | Visit components with filter    | 針對指定的 project 的 components 加上條件式篩選                                | https://&#x3C;host_name>/api/projects/&#x3C;project_id>/versions/&#x3C;version_id>/components                                        |</p>
<h2>Fortify On Demand(FoD)</h2>
<p>Fortify On Demand(以下簡稱 FoD)，擁有公開的<a href="https://api.ams.fortify.com/swagger/ui/index">官方 Swagger 文件</a>，提供你各式各樣的 APIs 使用，他還有一個很便利的功能就是可以直接用此 Swagger 文件模擬並發送請求至 APIs，所以當 Call 各種 APIs 都回傳 Error 時，可以考慮直接用這個模擬器先試試看。</p>
<p>今天介紹以下 API Endpoints:</p>
<ul>
<li>Oauth Authentication: <code>https://api.ams.fortify.com/oauth/token</code></li>
<li>Get Application: <code>https://api.ams.fortify.com/api/v3/application</code></li>
<li>Get Release (with filter): <code>https://api.ams.fortify.com/api/v3/release</code> or <code>https://api.ams.fortify.com/api/v3/application/&#x3C;application_id>/release</code></li>
</ul>
<h3><strong>Oauth Authentication</strong></h3>
<p>在 Call 任何 FoD 的 APIs 前，你必須請求這個 Oauth API Endpoint，取得回傳的 token，並使用那個 token 請求其他 FoD 的 API。</p>
<pre><code class="language-json">// POST https://api.ams.fortify.com/oauth/token
// Header
{
  "scope": "api-tenant", // scope 要去你的帳號設定查看。
  "grant_type": "password", // 取得權限是用password形式。
  "username": "&#x3C;tenant>\\&#x3C;user_name>", // tenant跟user name也是要去帳號設定查看，記得注意一個反斜線 \，但若是在程式碼內需要兩個反斜線\\，防止程式辨別特數字元。
  "password": "&#x3C;personal_token>" // 注意此項不是放你的密碼，是放你在設定裡產生的那組token。
}
</code></pre>
<p>response</p>
<pre><code class="language-json">{
  "access_token": "ZGHJ3274JDK" //送出請求後，可從response獲得一組token，這邊只是隨便寫代表，實際上很長。
}
</code></pre>
<h3><strong>Get Application</strong></h3>
<p>拿到專門 call API 的 token 後，我們就能使用那組 token 請求其他的 API 功能，首先我們先取得 Applications，這組 APIs 會取得列表 Application。</p>
<pre><code class="language-json">// GET https://api.ams.fortify.com/api/v3/application
// Header
{
  "Content-Type": "application/json",
  "Accept": "application/json",
  "Authorization": "Bearer &#x3C;token>" // 這邊要放你剛剛call Oauth取得的token
}
</code></pre>
<p>response</p>
<pre><code class="language-json">{
    ...,
    "items": [{
        "applicationName": "",
        "applicationId": "",
        ...
    }, {
        ...
    }
    ]
}
</code></pre>
<p>透過此 APIs，你會取得多個 Application，你可以知道他們的 Name 及 applicationId，方便查詢其他 API 使用，此 API 支援 filter，可以直接查找你想要找的 Application，我會在下個 API 介紹，filter 用法都差不多。</p>
<h3><strong>Get Release (with filter)</strong></h3>
<p>你可以選擇一次獲取全部的 release 或者獲取指定 application 下的 release，後者需要 applicationId。</p>
<pre><code class="language-json">// GET https://api.ams.fortify.com/api/v3/release or https://api.ams.fortify.com/api/v3/application/&#x3C;application_id>/release
// Header
{
    "Content-Type": "application/json",
    "Accept": "application/json",
    "Authorization": "Bearer &#x3C;token>", // 這邊要放你剛剛call Oauth取得的token
}

// Params -> 注意是Parameters，不是Body，這是Get請求，Python請放requests.get(params=&#x3C;params>)，postman請把參數放在Params，我被這坑到。
{
    "filter": "ReleaseName:&#x3C;service_name>" // 這是單一filter案例，多個請用 + 分開
}

</code></pre>
<p>這邊要特別注意 filter 放個內容是 <code>&#x3C;你要filter的欄位名稱1>:&#x3C;你要filter的值1>+&#x3C;你要filter的欄位名稱2>:&#x3C;你要filter的值2></code>，所以假設我今天想要 filter <code>ReleaseName</code>是<code>ppt-scanner</code>，就放<code>ReleaseName:ppt-scanner</code>，然後請夾帶至請求的 Parameters 欄位，這是 Get 方法。</p>
<p>至於能 filter 什麼，文件上好像沒寫，但可以仔細觀察 release API 回傳的 Response 會列出所有 Release 的服務，會順帶回傳該 Release 的所有屬性(資訊)，你可以去推哪些屬性是可以被拿來當作 Filter 的欄位。</p>
<h2>Black Duck (BD)</h2>
<p>Black Duck (以下簡稱 BD)，其 APIs 文件為非公開，你可以去網頁右上方的<code>?</code>找<code>REST API Developer Guide</code>，BD 的 API 文件，我個人覺得寫得很詳細，不過還是會有些需要注意的地方，但已經很完整了。</p>
<p>今天介紹以下 BD API Endpoints，由於 Black Duck APIs 是公司自架，自己的網域，所以以下只會列出後面的 API 連結，實際請求時，你要將 host_name 換成你們的網域:</p>
<ul>
<li>Authentication: <code>https://&#x3C;host_name>/api/tokens/authenticate</code></li>
<li>Query project: <code>https://&#x3C;host_name>/api/projects</code></li>
<li>Get version: <code>https://&#x3C;host_name>/api/projects/&#x3C;project_id>/versions</code></li>
<li>Generate Version Details Report: <code>https://&#x3C;host_name>/api/versions/&#x3C;version_id>/reports</code></li>
<li>Download Version Details Report: <code>https://&#x3C;host_name>/api/projects/&#x3C;project_id>/versions/&#x3C;version_id>/reports/&#x3C;report_id>/download</code></li>
<li>Visit components with filter: <code>https://&#x3C;host_name>/api/projects/&#x3C;project_id>/versions/&#x3C;version_id>/components</code></li>
</ul>
<h3><strong>Authentication</strong></h3>
<p>跟上方的 FoD 一樣，在 Call 任何其他 BD 的 APIs 前，你必須請求這個 authenticate API Endpoint，取得回傳的 token，並使用那個 token 請求其他 BD 的 API。</p>
<pre><code class="language-json">// POST https://&#x3C;host_name>/api/tokens/authenticate
// Header
{
  "Accept": "application/vnd.blackducksoftware.user-4+json",
  "Authorization": "token &#x3C;personal_token>" // 你可以在Black Duck的網站右上方人頭 -> Access token 產生一個 personal token，然後注意如果你需要產報告，你要把write權限打勾。
  // Authorization的值，請拜託一定要在前面加 token，才把personal token寫下去，我當時卡這個卡的一臉懵，卡一陣子，例子: "Authorization": "token GH2395JKls=="
}
</code></pre>
<p>response</p>
<pre><code class="language-json">{
  "bearerToken": "ZGHJ3274JDK" //送出請求後，可從response獲得一組token，這邊只是隨便寫代表，實際上很長。
}
</code></pre>
<h3><strong>Query project</strong></h3>
<p>拿到專門 call API 的 token 後，我們就能使用那組 token 請求其他的 API 功能，這個 API 可以取得所有的 projects，但你可以請 API 找出你想找的 project filter。</p>
<pre><code class="language-json">// GET https://&#x3C;host_name>/api/projects
// Header
{
    "Authorization": "Bearer &#x3C;bearerToken>", // 這邊要放你剛剛取得的BearerToken
}
// Params -> 沒錯又是Parameters，這是get請求，不要放去body。
// 如果你需要 limit限制回傳的筆數或者filter過濾你要找的projects，才需要這個parameters，如果沒有params，會回傳全部的projects (有限制筆數)
{
    "limit": 5, // 我限制5筆就好
    "q": "name:&#x3C;filter_name>" // 沒錯就是一個 q，這欄是filter，如果你想查指定名稱的project，就照這樣填，不確定其他可以filter的欄位。
}
</code></pre>
<p>response</p>
<pre><code class="language-json">{
    ...,
    "items": [{
        "name": "",
        "_meta": {
            "href": ""
        },
        ...
    }, {
        ...
    }
    ]
}
</code></pre>
<p>我發現就是呢，回傳的 project 資訊好像沒有 project_id，所以我當初是在<code>project</code>的 <code>_meta</code>抓<code>href</code>連結這個欄位，然後<code>split("/")[-1]</code> 取最後一段 id，那是該 project 的 id。</p>
<h3><strong>Get version</strong></h3>
<p>當你在上一步驟取得 project 後，可以使用這個 api 取得所有隸屬於那個 project 的版本 versions。</p>
<pre><code class="language-json">// GET https://&#x3C;host_name>/api/projects/&#x3C;project_id>/versions
// Header
{
  "Authorization": "Bearer &#x3C;bearerToken>" // 這邊要放你剛剛取得的BearerToken
}
</code></pre>
<p>記得在網址放上指定的 project_id</p>
<p>response</p>
<pre><code class="language-json">{
    "items": [{
        "versionName": "master",
        ...,
        "_meta": {
            "href": ""
        },
    },
    {
        "versionName": "version_1",
        ...,
        "_meta": {
            "href": ""
        },
    }
    ]
}
</code></pre>
<p>沒錯，就是呢，他又不會回傳 version_id 了，我們又得去<code>_meta</code>裡的<code>href</code>切割網址並找出他的 version_id。</p>
<p><code>split("/")[-1]</code>，一樣取最後一個，回傳的網址應該會長得像 <code>https://&#x3C;host_name>/api/projects/&#x3C;project_id>/versions/&#x3C;version_id></code></p>
<h3><strong>Generate Version Details Report</strong></h3>
<p>現在我們有 <code>project_id</code> 跟 <code>version_id</code> 了，那我們可以產出報告了。我只有研究怎麼產生 Version Details 報告，其他三種不太理解，但 API 寫得很清楚。</p>
<pre><code class="language-json">// POST https://&#x3C;host_name>/api/versions/&#x3C;version_id>/reports
// 沒錯很奇怪，居然不需要project_id，我懷疑他萬一有重複的version_id會怎麼判斷。
// Header
{
    "Content-Type": "application/json",
    "Authorization": "Bearer &#x3C;bearerToken>", // 這邊要放你剛剛取得的BearerToken
}

// Body -> 終於是 body了，post請求哈。
{
    "reportFormat": "CSV", // 這邊我們選csv，但我記得可以填JSON
    "reportType": "VERSION",
    "caregories": ["VERSION", "COMPONENTS", "SECURITY", "PROJECT_VERSION_CUSTOM_FIELDS"] // 這邊就是你產報告時，他會有Categories 的打勾勾選項，你選哪些，這邊就填哪些。
}
</code></pre>
<p>如果 categories 的部分你不是很確定的話，你可以去網站實際產一份報告，打勾你要的欄位，然後打開<code>開發者工具</code>-> <code>Network</code>，點選產生報告，Network 會紀錄他 call 了哪個 API，然後你可以去看他的 Body 送了什麼，複製過來就行。</p>
<p>response</p>
<pre><code class="language-json">{
    "links": {
        "download": {
            "url"
        }
    }
}
</code></pre>
<p>Reponse 的格式我不太確定，因為我是在 python 寫，回傳的好像是實際一個物件，你可以從<code>links</code> -> <code>download</code> -> <code>url</code> 去取得 <code>report_id</code>。</p>
<p>又是老招 <code>split("/")[-1]</code>，對 <code>url</code> 取最後一段，那就是<code>report_id</code>。</p>
<p>我在想搞不好其實都能獲得 <code>project_id, version_id, report_id</code>，只是我文件沒看清楚。</p>
<h3><strong>Download Version Details Report</strong></h3>
<p>產生報告後，記住他不是馬上完成，所以如果你是撰寫程式自動化，記得要寫 while 迴圈每 7-10 秒 call 一次 (沒意外大概 30 秒內都能完成)。</p>
<p>如果報告沒完成會回傳 HTTP Status 412，但注意的是不只報告沒產好會回傳 412，其他錯誤也會回傳 412，要注意看回傳 412 額外的 message 是否指報告還沒產好。</p>
<p>上一步驟產生的報告，這步驟我們就下載下來。</p>
<pre><code class="language-json">// GET https://&#x3C;host_name>/api/projects/&#x3C;project_id>/versions/&#x3C;version_id>/reports/&#x3C;report_id>/download
// 真奇妙，產報告不需要 project_id，載報告需要，難道report_id是會重複的？
// Header
{
  "Authorization": "Bearer &#x3C;bearerToken>" // 這邊要放你剛剛取得的BearerToken
}
</code></pre>
<p>一條 get 就把內容載下來了，response 的 content 是 bytes 檔，我不知道怎麼用 json 呈現，以下是展示怎麼把回傳的 bytes 文字存擋。 (用 python)</p>
<pre><code class="language-py"># 如果是下載在local
import io
import zipfile

response = requests.get(url, headers=headers)
if response.status_code == 200:
    z = zipfile.ZipFile(io.BytesIO(response.content))
    z.extractall("./")

</code></pre>
<pre><code class="language-py"># 如果是想存進 AWS S3
import io
import boto3
import zipfile

s3_client = boto3.client("s3")

s3_bucket = "&#x3C;bucket_name>"

response = requests.get(url, headers=headers)
if response.status_code == 200:
    z = zipfile.ZipFile(io.BytesIO(response.content))
    for file_info in z.infolist():
        file_name = file_info.filename

        # 讀取 file content
        file_content = z.read(file_name)

        save_key = f"&#x3C;prefix>/{file_name}"

        # 上傳檔案內容到S3
        s3_client.upload_fileobj(io.BytesIO(file_content), s3_bucket, save_key)

</code></pre>
<h3><strong>Visit components with filter</strong></h3>
<p>最後一個要介紹的是，訪問指定的<code>project_id</code>與指定版本<code>version_id</code>的 components，並添加 filter，去過濾 components。</p>
<p>此 API，我只有嘗試加一個 filter，文件裡有寫可以加多個 filters。</p>
<pre><code class="language-json">// GET https://&#x3C;host_name>/api/projects/&#x3C;project_id>/versions/&#x3C;version_id>/components
// 一樣要填 project_id 和 version_id

// Header
{
    "Authorization": "Bearer &#x3C;bearerToken>", // 這邊要放你剛剛取得的BearerToken
}

// Params -> Parameters 哈，這邊用GET方式
{
    "limit": 10, // 看你要不要設筆數
    "filter": "bomPolicy:in_violation" // filter -> 欄位:選項
}

</code></pre>
<p>這邊抓出有 violation 的 components。</p>
<p>response</p>
<pre><code class="language-json">// 如果沒有找到filter符合的資料，items會留空 []。
{
  "items": [
    {
      "componentName": "",
      "componentVersionName": ""
    },
    {
      "componentName": "",
      "componentVersionName": ""
    }
  ]
}
</code></pre>
<p>如此一來就能透過添加 <code>Params</code> 的方式，去 filter components。</p>
<p>那如果你不確定 filter 內容怎麼寫，一樣可以直接去網站，進到 components，打開<code>開發者工具</code> -> <code>Network</code>，然後添加 filters，你就會看到<code>Network</code>抓到的 Params 資訊。</p>
<p>或者可以透過網址直接辨識: <code>https://&#x3C;host_name>/api/projects/&#x3C;project_id>/versions/&#x3C;version_id>/components?filter=bomPolicy:in_violation</code>，在<code>?filter=</code>後面的值辨識那些欄位跟植，然後寫進請求裡的 Params 裡嘗試。</p>
<p>好啦，以上就是此次 Fortify On Demand 和 Black Duck APIs 的研究結果，希望有幫到你。</p>
2:[["$","header",null,{"children":["$","div",null,{"className":"max-auto","children":["$","div",null,{"className":"mx-auto flex flex-wrap border-b border-solid","children":[["$","div",null,{"className":"lg:w-1/2 w-full lg: h-full object-cover object-center bg-cover","children":["$","div",null,{"className":"w-full h-full","children":["$","div",null,{"className":"relative overflow-hidden","children":[["$","img",null,{"className":"object-cover w-full brightness-75 h-[20rem]` md:h-[25rem]","src":"/static/img/blog-cover-image.jpg","alt":"Blog Cover Image"}],["$","div",null,{"children":[["$","$L8",null,{}],["$","div",null,{"className":"absolute px-2 py-2 site-branding h-[25rem]","children":[["$","div",null,{"className":"site-title","children":["$","p",null,{"children":["$","a",null,{"href":"/","children":"@Mina Influence"}]}]}],["$","div",null,{"className":"site-description","children":["$","p",null,{"children":"Inspire you to have New thinking, Walk out your unique Road."}]}]]}]]}]]}]}]}],["$","div",null,{"className":"grid justify-items-center lg:w-1/2 w-full lg:h-auto lg:py-6 mt-6 lg:mt-0 hidden md:block","children":["$","div",null,{"className":"blog-branding-intro motto-block","children":["$","section",null,{"className":"text-gray-500 body-font","children":["$","div",null,{"className":"container px-6 mx-auto","children":["$","div",null,{"className":"w-full mx-auto text-center","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","fill":"currentColor","className":"inline-block w-6 h-6 text-gray-400 mb-4","viewBox":"0 0 975.036 975.036","children":["$","path",null,{"d":"M925.036 57.197h-304c-27.6 0-50 22.4-50 50v304c0 27.601 22.4 50 50 50h145.5c-1.9 79.601-20.4 143.3-55.4 191.2-27.6 37.8-69.399 69.1-125.3 93.8-25.7 11.3-36.8 41.7-24.8 67.101l36 76c11.6 24.399 40.3 35.1 65.1 24.399 66.2-28.6 122.101-64.8 167.7-108.8 55.601-53.7 93.7-114.3 114.3-181.9 20.601-67.6 30.9-159.8 30.9-276.8v-239c0-27.599-22.401-50-50-50zM106.036 913.497c65.4-28.5 121-64.699 166.9-108.6 56.1-53.7 94.4-114.1 115-181.2 20.6-67.1 30.899-159.6 30.899-277.5v-239c0-27.6-22.399-50-50-50h-304c-27.6 0-50 22.4-50 50v304c0 27.601 22.4 50 50 50h145.5c-1.9 79.601-20.4 143.3-55.4 191.2-27.6 37.8-69.4 69.1-125.3 93.8-25.7 11.3-36.8 41.7-24.8 67.101l35.9 75.8c11.601 24.399 40.501 35.2 65.301 24.399z"}]}],["$","p",null,{"className":"leading-relaxed","children":"有的時候，你無意間遇到的一些故事，會激發你的靈感，改變你的想法，接下來你會用與之前全然不同的觀念去創造屬於你獨特的故事。"}],["$","span",null,{"className":"inline-block h-1 w-10 rounded bg-pink-500 mt-8 mb-6"}],["$","h2",null,{"className":"text-gray-900 font-medium title-font tracking-wider text-lg","children":"Sign @MinaYu."}]]}]}]}]}]}]]}]}]}],["$","section",null,{"className":"text-gray-600 body-font","children":["$","div",null,{"className":"container py-12 mx-auto","children":["$","div",null,{"className":"flex-wrap","children":["$","div",null,{"className":"p-2","children":["$","div",null,{"className":"mx-auto flex flex-wrap bg-white","children":[["$","div",null,{"className":"lg:w-2/3 w-full lg: h-full object-cover object-center bg-cover","children":["$","div",null,{"className":"px-4 mb-4","children":[["$","div",null,{"className":"mb-10 border border-solid py-4","children":[["$","p",null,{"className":"text-center tracking-widest text-md font-medium post-category font-fondamento","children":"軟體開發 SWD"}],["$","h3",null,{"className":"text-center tracking-widest text-md font-medium post-category font-fondamento","children":"software-development"}],["$","p",null,{"className":"font-bold text-center text-gray grid-subtitle text-md font-fondamento px-4 pt-2 pb-2","children":"[後端技術研究] Black Duck APIs 和 Fortify On Demand APIs 怎麼使用？ (透過Python Requests或Postman)"}],["$","p",null,{"className":"text-center test-gray italic tracking-wider font-mario","children":["Posted on","Dec"," ",4,", ",2023]}]]}],["$","div",null,{"className":"flex-wrap","children":["",["$","article",null,{"className":"prose prose-slate prose-lg max-w-none break-words whitespace-pre-wrap","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$9"}}]}]]}]]}]}],["$","div",null,{"className":"lg:w-1/3 w-full lg:h-auto lg: mt-6 lg:mt-0","children":["$","div",null,{"className":"px-4","children":[["$","div",null,{"children":[["$","div",null,{"className":"mb-10 border border-solid py-4","children":["$","p",null,{"className":"font-bold text-center text-gray grid-subtitle text-md","children":"ABOUT ME"}]}],["$","div",null,{"className":"flex items-center justify-center","children":["$","img",null,{"className":"object-cover rounded-full","width":"175","height":"175","src":"/static/img/logo.jpg","alt":"Author Profile"}]}],["$","p",null,{"className":"leading-relaxed text-md text-center pt-3 pb-3 px-2 motto-block","children":"嗨，我是Mina. 一個ENTP奇女子，時常可以隨手拈來創意的Idea，正向､ 活躍且浪漫。是軟體開發工程師､ 部落客，還是多語學習者，喜歡去探索不同的文化跟發明些東東。"}],["$","p",null,{"className":"leading-relaxed text-2xl text-center pt-1 pb-4 motto-block","children":"@MinaYu Signed"}],["$","div",null,{"className":"border border-solid py-4","children":["$","p",null,{"className":"font-bold text-center text-gray grid-subtitle text-md","children":"BLOG STATS"}]}],["$","div",null,{"className":"my-5 pl-5 font-bold font-voll","children":[["$","span",null,{"id":"busuanzi_container_site_pv","children":["$","p",null,{"className":"pb-2","children":["Visits: ",["$","span",null,{"id":"busuanzi_value_site_pv"}]]}]}],["$","span",null,{"id":"busuanzi_container_site_uv","children":["$","p",null,{"children":["Visitors: ",["$","span",null,{"id":"busuanzi_value_site_uv"}]]}]}]]}]]}],["$","div",null,{"className":"mb-5 border border-solid py-4","children":["$","p",null,{"className":"font-bold text-center text-gray grid-subtitle text-md","children":"CATEGORY"}]}],[["$","div","software-development",{"children":[["$","a",null,{"href":"/categories/software-development/","className":"blog-link-style","children":["$","div",null,{"className":"py-3 text-sm border-b border-solid font-fondamento","children":["軟體開發 SWD"," ",["$","span",null,{"className":"font-color-gold-1","children":["(",104,")"]}]]}]}],["$","div",null,{"className":"list-disc list-inside ml-4 text-gray-600","children":[["$","a","frontend-senior-training-plan",{"className":"link-unstyled","href":"/categories/frontend-senior-training-plan/","children":["$","div",null,{"className":"py-3 text-sm border-b border-solid font-fondamento","children":["[前端] 前端小菜鳥的成長計畫"," ",["$","span",null,{"className":"font-color-gold-1","children":["(",11,")"]}]]}]}],["$","a","building-diary-of-website-and-blog",{"className":"link-unstyled","href":"/categories/building-diary-of-website-and-blog/","children":["$","div",null,{"className":"py-3 text-sm border-b border-solid font-fondamento","children":["網頁與部落格的建築日記"," ",["$","span",null,{"className":"font-color-gold-1","children":["(",21,")"]}]]}]}],["$","a","10000-hours-backend-senior-training-plan",{"className":"link-unstyled","href":"/categories/10000-hours-backend-senior-training-plan/","children":["$","div",null,{"className":"py-3 text-sm border-b border-solid font-fondamento","children":["[後端] 1萬小時 - 後端工程師養成計劃"," ",["$","span",null,{"className":"font-color-gold-1","children":["(",39,")"]}]]}]}],["$","a","architectural-design-and-solutions",{"className":"link-unstyled","href":"/categories/architectural-design-and-solutions/","children":["$","div",null,{"className":"py-3 text-sm border-b border-solid font-fondamento","children":["架構設計與構思創新解決方案"," ",["$","span",null,{"className":"font-color-gold-1","children":["(",10,")"]}]]}]}],["$","a","working-travel-diary",{"className":"link-unstyled","href":"/categories/working-travel-diary/","children":["$","div",null,{"className":"py-3 text-sm border-b border-solid font-fondamento","children":["工作旅行記"," ",["$","span",null,{"className":"font-color-gold-1","children":["(",10,")"]}]]}]}],["$","a","crasy-master-paper",{"className":"link-unstyled","href":"/categories/crasy-master-paper/","children":["$","div",null,{"className":"py-3 text-sm border-b border-solid font-fondamento","children":["[專案] 碩論也瘋狂"," ",["$","span",null,{"className":"font-color-gold-1","children":["(",13,")"]}]]}]}]]}]]}],["$","div","mysticism-and-numerology",{"children":[["$","a",null,{"href":"/categories/mysticism-and-numerology/","className":"blog-link-style","children":["$","div",null,{"className":"py-3 text-sm border-b border-solid font-fondamento","children":["神秘學與命理研究談"," ",["$","span",null,{"className":"font-color-gold-1","children":["(",26,")"]}]]}]}],["$","div",null,{"className":"list-disc list-inside ml-4 text-gray-600","children":[["$","a","divination",{"className":"link-unstyled","href":"/categories/divination/","children":["$","div",null,{"className":"py-3 text-sm border-b border-solid font-fondamento","children":["占卜"," ",["$","span",null,{"className":"font-color-gold-1","children":["(",5,")"]}]]}]}],["$","a","temple-and-buddha",{"className":"link-unstyled","href":"/categories/temple-and-buddha/","children":["$","div",null,{"className":"py-3 text-sm border-b border-solid font-fondamento","children":["寺廟與佛"," ",["$","span",null,{"className":"font-color-gold-1","children":["(",2,")"]}]]}]}],["$","a","mysticism",{"className":"link-unstyled","href":"/categories/mysticism/","children":["$","div",null,{"className":"py-3 text-sm border-b border-solid font-fondamento","children":["神秘學相關"," ",["$","span",null,{"className":"font-color-gold-1","children":["(",6,")"]}]]}]}],["$","a","chart",{"className":"link-unstyled","href":"/categories/chart/","children":["$","div",null,{"className":"py-3 text-sm border-b border-solid font-fondamento","children":["命理學與命盤"," ",["$","span",null,{"className":"font-color-gold-1","children":["(",13,")"]}]]}]}]]}]]}],["$","div","life",{"children":[["$","a",null,{"href":"/categories/life/","className":"blog-link-style","children":["$","div",null,{"className":"py-3 text-sm border-b border-solid font-fondamento","children":["日常生活"," ",["$","span",null,{"className":"font-color-gold-1","children":["(",42,")"]}]]}]}],["$","div",null,{"className":"list-disc list-inside ml-4 text-gray-600","children":[["$","a","anxiety-anti-diary",{"className":"link-unstyled","href":"/categories/anxiety-anti-diary/","children":["$","div",null,{"className":"py-3 text-sm border-b border-solid font-fondamento","children":["我的焦慮對抗日記"," ",["$","span",null,{"className":"font-color-gold-1","children":["(",4,")"]}]]}]}],["$","a","life-experience",{"className":"link-unstyled","href":"/categories/life-experience/","children":["$","div",null,{"className":"py-3 text-sm border-b border-solid font-fondamento","children":["人生體驗與經驗"," ",["$","span",null,{"className":"font-color-gold-1","children":["(",33,")"]}]]}]}],["$","a","thinking-and-reflection",{"className":"link-unstyled","href":"/categories/thinking-and-reflection/","children":["$","div",null,{"className":"py-3 text-sm border-b border-solid font-fondamento","children":["想東想西日常故事"," ",["$","span",null,{"className":"font-color-gold-1","children":["(",5,")"]}]]}]}]]}]]}],["$","div","language-learning",{"children":[["$","a",null,{"href":"/categories/language-learning/","className":"blog-link-style","children":["$","div",null,{"className":"py-3 text-sm border-b border-solid font-fondamento","children":["語言相關 LANGUAGE"," ",["$","span",null,{"className":"font-color-gold-1","children":["(",31,")"]}]]}]}],["$","div",null,{"className":"list-disc list-inside ml-4 text-gray-600","children":[["$","a","experience-and-exam",{"className":"link-unstyled","href":"/categories/experience-and-exam/","children":["$","div",null,{"className":"py-3 text-sm border-b border-solid font-fondamento","children":["學習經驗與考試相關"," ",["$","span",null,{"className":"font-color-gold-1","children":["(",14,")"]}]]}]}],["$","a","toefl-prepare-plan",{"className":"link-unstyled","href":"/categories/toefl-prepare-plan/","children":["$","div",null,{"className":"py-3 text-sm border-b border-solid font-fondamento","children":["托福準備紀錄"," ",["$","span",null,{"className":"font-color-gold-1","children":["(",17,")"]}]]}]}]]}]]}],["$","div","travel-diary",{"children":[["$","a",null,{"href":"/categories/travel-diary/","className":"blog-link-style","children":["$","div",null,{"className":"py-3 text-sm border-b border-solid font-fondamento","children":["旅行日記 Travel"," ",["$","span",null,{"className":"font-color-gold-1","children":["(",56,")"]}]]}]}],["$","div",null,{"className":"list-disc list-inside ml-4 text-gray-600","children":[["$","a","japan",{"className":"link-unstyled","href":"/categories/japan/","children":["$","div",null,{"className":"py-3 text-sm border-b border-solid font-fondamento","children":["日本－自由行旅記"," ",["$","span",null,{"className":"font-color-gold-1","children":["(",37,")"]}]]}]}],["$","a","taiwan",{"className":"link-unstyled","href":"/categories/taiwan/","children":["$","div",null,{"className":"py-3 text-sm border-b border-solid font-fondamento","children":["台灣－蕃薯故鄉走跳"," ",["$","span",null,{"className":"font-color-gold-1","children":["(",5,")"]}]]}]}],["$","a","eu-europe",{"className":"link-unstyled","href":"/categories/eu-europe/","children":["$","div",null,{"className":"py-3 text-sm border-b border-solid font-fondamento","children":["歐洲－英國與冰島追逐幸福極光"," ",["$","span",null,{"className":"font-color-gold-1","children":["(",3,")"]}]]}]}],["$","a","us-america",{"className":"link-unstyled","href":"/categories/us-america/","children":["$","div",null,{"className":"py-3 text-sm border-b border-solid font-fondamento","children":["美國－賓州Juniata姐妹校與企業參訪"," ",["$","span",null,{"className":"font-color-gold-1","children":["(",11,")"]}]]}]}]]}]]}]],["$","div",null,{"className":"mb-10 border border-solid py-4 mt-10","children":["$","p",null,{"className":"font-bold text-center text-gray grid-subtitle text-md","children":"GALLERY"}]}]]}]}]]}]}]}]}]}],["$","footer",null,{"children":[["$","div",null,{"className":"bg-white border-t border-solid","children":["$","div",null,{"className":"container px-5 mx-auto","children":["$","div",null,{"className":"xl:w-1/2 lg:w-3/4 w-full mx-auto text-center","children":["$","div",null,{"className":"text-gray-600 text-center text-xl font-hand-writing tracking-wider py-8 px-2","children":"Hi, It's Mina Yu, a software engineer, blogger and polyglot learner. Since 7-9 years ago, my dream is designing my own personal website and now I did it, I changed the website name to @Mina Influence, want to encourage people by my influence. I will continue to achieve more my dream in the future. I just want to tell you, no matter your plan looks how hard and how unachievable, Once you begin to do it, everything will be changed."}]}]}]}],["$","div",null,{"className":"bg-cyan-50 border-t border-solid","children":["$","div",null,{"className":"text-gray-300 text-center text-md motto-block py-8 px-4","children":"Copy Right © 2024 @Mina Influence. Designed by MINA YU. Sign @MinaYu."}]}]]}]]
